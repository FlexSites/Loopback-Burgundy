# SSL REDIRECT
#server {
#       listen         80;
#       server_name    {{#hosts}} {{.}}{{/hosts}};
#       return         301 https://$server_name$request_uri;
#}

# HOST ALIASES
{{#aliases.length}}
server { 
    server_name{{#aliases}} {{.}}{{/aliases}}; 
    return 301 $scheme://{{host}}$request_uri;
}
{{/aliases.length}}

server {

    # CONFIG
    listen 80;
    #listen 443 ssl spdy;
    charset utf-8;
    root /www/sites/{{abbr}}/public;

    #ssl on;
    #ssl_certificate /www/ssl/server.crt;
    #ssl_certificate_key /www/ssl/server.key; 

    # HOSTS
    server_name{{#hosts}} {{.}}{{/hosts}};
    
    # LOGS
    access_log /var/log/{{abbr}}.access.log;
    error_log /var/log/{{abbr}}.error.log;
    rewrite_log on;

    # EXPIRATION DATE
    expires max;

    # NOT FOUND
    error_page 404 /404;
    location = /404 {
        internal;
        try_files /{{abbr}}/public/index.html /global/public/index.html =404;
    }

    # Remove cache busting to URLs ending with numbers
    rewrite ^/(css|js|ng|html|cache|font|img|media)/([^0-9]+)\d+(\..+)$ /$1/$2$3;


    location ^~ /pages/ {
        root /www/sites/global;
    }

    # PAGESPEED
    location ~ "\.pagespeed\.([a-z]\.)?[a-z]{2}\.[^.]{10}\.[^.]+" {
      add_header "" "";
    }
    location ~ "^/pagespeed_static/" { }
    location ~ "^/ngx_pagespeed_beacon$" { }

    # BLANK GIF
    location = /img/blank.gif {
        empty_gif;
        access_log off;
    }

    # BLANK FILE
    location = /blank.txt {
        access_log off;
        return 200 '';
    }

    # FONTS
    location ~ \.(js|css|xml|txt|svg|html|woff|ttf|eot?) {
        error_page 404 /blank.txt;
    }

    # IMAGES
	location ~ \.(jpe?g|png|gif) {
        error_page 404 /img/blank.gif;
     }

    # FORCE DOWNLOAD
    location /downloads {
        root /www/sites/{{abbr}};
        add_header Content-Disposition 'attachment; filename="press-kit.zip"';
    }    

    # ROUTES 
    {{#routes}}
        {{#isSearchable}}
            #location = '{{url}}' {
            #    try_files $uri @prerender;
            #}
        {{/isSearchable}}
    {{/routes}}    
     
    {{#isProd}}
    location / {
        try_files $uri @prerender;
    }
 
    location @prerender {
        proxy_set_header X-Prerender-Token qci1TsmQv38vDqo7OU7T;
        
        set $prerender 0;
        if ($http_user_agent ~* "baiduspider|twitterbot|facebookexternalhit|rogerbot|linkedinbot|embedly|quora link preview|showyoubot|outbrain|pinterest|slackbot") {
            set $prerender 1;
        }
        if ($args ~ "_escaped_fragment_") {
            set $prerender 1;
        }
        if ($http_user_agent ~ "Prerender") {
            set $prerender 0;
        }
        if ($uri ~ "\.(js|css|xml|less|png|jpg|jpeg|gif|pdf|doc|txt|ico|rss|zip|mp3|rar|exe|wmv|doc|avi|ppt|mpg|mpeg|tif|wav|mov|psd|ai|xls|mp4|m4a|swf|dat|dmg|iso|flv|m4v|torrent)") {
            set $prerender 0;
        }
        
        #resolve using Google's DNS server to force DNS resolution and prevent caching of IPs
        resolver 8.8.8.8;
 
        if ($prerender = 1) {
            
            #setting prerender as a variable forces DNS resolution since nginx caches IPs and doesnt play well with load balancing
            set $prerender "service.prerender.io";
            rewrite .* /$scheme://$host$request_uri? break;
            proxy_pass http://$prerender;
        }
        if ($prerender = 0) {
            rewrite .* /index.html break;
        }
    }
    {{/isProd}}
    {{^isProd}}
    location / {
        try_files /index.html =404;
    }
    {{/isProd}}
    

    {{#redirects.length}}
    # REDIRECTS
    location / {
        {{#redirects}}
        rewrite {{src}} {{dest}} {{type}};
        {{/redirects}}
    }
    {{/redirects.length}}
}
